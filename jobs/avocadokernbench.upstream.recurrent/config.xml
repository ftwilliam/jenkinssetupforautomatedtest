<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>&lt;img src=&quot;http://avocado-server:8080/job/avocadokernbench.upstream.recurrent/plot/getPlot?index=0&amp;width=750&amp;height=450&quot;/&gt;&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkins.plugins.lockableresources.RequiredResourcesProperty plugin="lockable-resources@2.3">
      <resourceNames>diesel8a87host</resourceNames>
    </org.jenkins.plugins.lockableresources.RequiredResourcesProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H H/24 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># Template0_20180824

# Get list of resources locked by this build.
RESOURCES=${RESOURCES:-$(cd ${JENKINS_HOME} &amp;&amp; ./resourceslockedby.py ${JOB_BASE_NAME}#${BUILD_NUMBER})}

# Create csv header.
:&gt; plot.csv
for R in ${RESOURCES}; do
	echo -n \&quot;${R}.user\&quot;, &gt;&gt; plot.csv
	echo -n \&quot;${R}.system\&quot;, &gt;&gt; plot.csv
	echo -n \&quot;${R}.elapsed\&quot;, &gt;&gt; plot.csv
done
truncate --size=-1 plot.csv
echo &gt;&gt; plot.csv

# Kernel git repository to use:
KERNELREPO=${KERNELREPO:-&quot;https://github.com/torvalds/linux.git&quot;}

# Kernel version to use.
KERNVER=${KERNVER:-$(echo ${JOB_BASE_NAME} | grep -oP &apos;(?&lt;=\.)v.+\..+(?=\.)&apos; || :;)}

TIMEOUT=1800
ITERATIONS=16

# Remove failure flags if any.
rm -rf *.failed

# Run test on each resource.
for R in ${RESOURCES}; do
	# In order to execute in parallel, each
	# ressource test run within its own subshell.
	(
		# Insure resource provisioned for test.
        if ! (cd ${JENKINS_HOME} &amp;&amp; ./checkresourceprovisioned.sh ${R}) &amp;&gt; ${R}.checkresourceprovisioned.log; then
			touch ${R}.failed
			# Continue on to the next resource if
			# the provision-check fail on this resource.
			continue
		fi
		# Check if a new kernel need to be installed.
		ssh -q jenkins@${R} ./checkfornewkerneltag.sh ${KERNELREPO} ${KERNVER} &amp;&gt; ${R}.checkfornewkerneltag.log || :;
		# Get the last version built.
		kernbuilt=$(ssh -q jenkins@${R} ls kernel/linux-image* | grep -oP &quot;(?&lt;=linux-image-).+(?=-jenkins_)&quot;)
		# Reboot resource into last kernel version built.
		(cd ${JENKINS_HOME} &amp;&amp; ./rebootresource.sh jenkins@${R} ${kernbuilt}) &amp;&gt; ${R}.rebootresource.log
		echo &quot;${R}: $(ssh -q jenkins@${R} &apos;uname -r&apos;)&quot; &gt; ${R}.kernelrelease
		timeout -sKILL ${TIMEOUT} ssh -q jenkins@${R} &amp;&gt; ${R}.ssh.log &lt;&lt;-EOF || touch ${R}.failed
			set -e
			cat &gt; ${JOB_BASE_NAME}.yaml &lt;&lt;-NESTEDEOF
				iteration: !mux
				default:
				runs: ${ITERATIONS}
			NESTEDEOF
			sudo avocado run avocado-misc-tests/kernel/kernbench.py -m ${JOB_BASE_NAME}.yaml
		EOF
		if [ -n &quot;${AVOCADO_LOG_PATH}&quot; ]; then
			AVOCADO_LOG_PATH=$(cat ${R}.ssh.log | fgrep &apos;JOB LOG&apos; | grep -oP &apos;(?&lt;=: ).+$&apos;)
		fi
		if [ ! -e ${R}.failed ]; then
			scp jenkins@${R}:${AVOCADO_LOG_PATH} ${R}.avocado.log
			CPUCNT=$(ssh -q jenkins@${R} grep -c &apos;^processor&apos; /proc/cpuinfo)
			userplotval=$(echo \($(cat ${R}.avocado.log | fgrep &apos;User &apos; | grep -oP &apos;(?&lt;= : )[0-9.]+$&apos;) / ${ITERATIONS}\) / ${CPUCNT} | bc -l)
			systemplotval=$(echo \($(cat ${R}.avocado.log | fgrep &apos;System &apos; | grep -oP &apos;(?&lt;= : )[0-9.]+$&apos;) / ${ITERATIONS}\) / ${CPUCNT} | bc -l)
			elapsedplotval=$(echo $(cat ${R}.avocado.log | fgrep &apos;Elapsed &apos; | grep -oP &apos;(?&lt;= : )[0-9.]+$&apos;) / ${ITERATIONS} | bc -l)
			# Average with previous values if available,
			# in an attempt to remove noise from plots.
			# It is enough to test for the existance
			# of a single previous value.
			if [ -f ${R}.user.prevplotval ]; then
				userplotval=$(echo \($(cat ${R}.user.prevplotval)+${userplotval}\)/2 | bc -l)
				systemplotval=$(echo \($(cat ${R}.system.prevplotval)+${systemplotval}\)/2 | bc -l)
				elapsedplotval=$(echo \($(cat ${R}.elapsed.prevplotval)+${elapsedplotval}\)/2 | bc -l)
			fi
			echo -n ${userplotval} &gt; ${R}.user.prevplotval
			echo -n ${systemplotval} &gt; ${R}.system.prevplotval
			echo -n ${elapsedplotval} &gt; ${R}.elapsed.prevplotval
			echo -n ${userplotval} &gt; ${R}.user.plotval
			echo -n ${systemplotval} &gt; ${R}.system.plotval
			echo -n ${elapsedplotval} &gt; ${R}.elapsed.plotval
		fi
	) &amp;
done

# Wait for all subshells.
wait

# Generate &quot;Kernel Release:&quot; line for
# the &quot;Set Build Description&quot; plugin.
echo -n &quot;Kernel Release: &quot; &gt; kernelreleases
for R in ${RESOURCES}; do
	if [ -f ${R}.kernelrelease ]; then
		echo -n &quot;$(cat ${R}.kernelrelease 2&gt;/dev/null), &quot; &gt;&gt; kernelreleases
	fi
done
truncate --size=-2 kernelreleases
echo [$(cat kernelreleases)]

# Finalize csv with plot values.
for R in ${RESOURCES}; do
	echo -n &quot;$(cat ${R}.user.plotval 2&gt;/dev/null),&quot; &gt;&gt; plot.csv
	echo -n &quot;$(cat ${R}.system.plotval 2&gt;/dev/null),&quot; &gt;&gt; plot.csv
	echo -n &quot;$(cat ${R}.elapsed.plotval 2&gt;/dev/null),&quot; &gt;&gt; plot.csv
done
truncate --size=-1 plot.csv
echo &gt;&gt; plot.csv

# This is the last command so as
# to be the script exit status.
test ! -e *.failed
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.log, *.csv</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.plot.PlotPublisher plugin="plot@2.1.0">
      <plots>
        <hudson.plugins.plot.Plot>
          <title>avocadokernbench</title>
          <yaxis>Seconds</yaxis>
          <series>
            <hudson.plugins.plot.CSVSeries>
              <file>plot.csv</file>
              <label></label>
              <fileType>csv</fileType>
              <inclusionFlag>OFF</inclusionFlag>
              <exclusionValues></exclusionValues>
              <url></url>
              <displayTableFlag>false</displayTableFlag>
            </hudson.plugins.plot.CSVSeries>
          </series>
          <group>avocadokernbench</group>
          <numBuilds></numBuilds>
          <csvFileName>plot-7746477396399308319.csv</csvFileName>
          <csvLastModification>0</csvLastModification>
          <style>lineSimple</style>
          <useDescr>false</useDescr>
          <keepRecords>false</keepRecords>
          <exclZero>false</exclZero>
          <logarithmic>false</logarithmic>
          <yaxisMinimum></yaxisMinimum>
          <yaxisMaximum></yaxisMaximum>
        </hudson.plugins.plot.Plot>
      </plots>
    </hudson.plugins.plot.PlotPublisher>
    <hudson.plugins.descriptionsetter.DescriptionSetterPublisher plugin="description-setter@1.10">
      <regexp>(?&lt;=\[Kernel Release: ).+(?=\])</regexp>
      <regexpForFailed>(?&lt;=\[Kernel Release: ).+(?=\])</regexpForFailed>
      <setForMatrix>false</setForMatrix>
    </hudson.plugins.descriptionsetter.DescriptionSetterPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <patterns>
        <hudson.plugins.ws__cleanup.Pattern>
          <pattern>*.prevplotval</pattern>
          <type>EXCLUDE</type>
        </hudson.plugins.ws__cleanup.Pattern>
      </patterns>
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>