<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>KERNELREPO</name>
          <description>Git repository to use when cloning the kernel.</description>
          <defaultValue>https://github.com/torvalds/linux.git</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KERNELTAG</name>
          <description>Kernel tag to use; it can also be a commit id.</description>
          <defaultValue>v4.16-rc2</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RESOURCES</name>
          <description>Space separated list of hostnames onto which to run the test</description>
          <defaultValue>leseidlb950</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># Get list of resources locked by this build.
RESOURCES=${RESOURCES:-$(cd ${JENKINS_HOME} &amp;&amp; ./resourceslockedby.py ${JOB_BASE_NAME}#${BUILD_NUMBER})}

# Kernel version to use.
KERNVER=${KERNVER:-$(echo ${JOB_BASE_NAME} | grep -oP &apos;(?&lt;=\.)v.+\..+(?=\.)&apos; || :;)}

TIMEOUT=1800

# Run test on each resource.
for R in ${RESOURCES}; do
	# In order to execute in parallel, each
	# ressource test run within its own subshell.
	(
		# Insure resource provisioned for test.
		if ! (cd ${JENKINS_HOME} &amp;&amp; ./checkresourceprovisioned.sh ${R}) &amp;&gt; ${R}.checkresourceprovisioned.log; then
			# Continue on to the next resource if
			# the provision-check fail on this resource.
			continue
		fi
		# Check if a new kernel need to be installed.
		if ssh -q jenkins@${R} &apos;./checkfornewkerneltag.sh https://github.com/torvalds/linux.git&apos; ${KERNVER} &amp;&gt; ${R}.checkfornewkerneltag.log; then
			# Get the version built.
            kernbuilt=$(ssh -q jenkins@${R} ls kernel/linux-image* | grep -oP &quot;(?&lt;=linux-image-).+(?=-jenkins_)&quot;)
			# Reboot resource into kernel version built.
			(cd ${JENKINS_HOME} &amp;&amp; ./rebootresource.sh jenkins@${R} ${kernbuilt} &amp;&gt; /dev/null)
		fi
		echo &quot;${R}: $(ssh -q jenkins@${R} &apos;uname -r&apos;)&quot; &gt; ${R}.kernelrelease
		timeout -sKILL ${TIMEOUT} ssh -q jenkins@${R} &amp;&gt; ${R}.ssh.log &lt;&lt;-EOF || :;
			set -e
			cat &gt; ${JOB_BASE_NAME}.yaml &lt;&lt;-NESTEDEOF
				setup:
				rmaptestrun : !mux
				nu_itr : &apos;100&apos;
				nu_vma : &apos;100&apos;
				size_vma : &apos;100&apos;
				task : &apos;100&apos;
				number : &apos;10&apos;
			NESTEDEOF
			sudo avocado run avocado-misc-tests/kernel/rmaptest.py -m ${JOB_BASE_NAME}.yaml
		EOF
		if [ ${PIPESTATUS[0]} -eq 0 ]; then
			AVOCADO_LOG_PATH=$(cat ${R}.ssh.log | fgrep &apos;JOB LOG&apos; | grep -oP &apos;(?&lt;=: ).+$&apos;)
			scp jenkins@${R}:${AVOCADO_LOG_PATH} ${R}.avocado.log
		fi
	) &amp;
done

# Wait for all subshells.
wait

# Generate &quot;Kernel Release:&quot; line for
# the &quot;Set Build Description&quot; plugin.
echo -n &quot;Kernel Release: &quot; &gt; kernelreleases
for R in ${RESOURCES}; do
	if [ -f ${R}.kernelrelease ]; then
		echo -n &quot;$(cat ${R}.kernelrelease 2&gt;/dev/null | grep -oP &apos;.+(?=-jenkins)&apos;), &quot; &gt;&gt; kernelreleases
	fi
done
truncate --size=-2 kernelreleases
echo [$(cat kernelreleases)]
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.log</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.plugins.descriptionsetter.DescriptionSetterPublisher plugin="description-setter@1.10">
      <regexp>(?&lt;=\[Kernel Release: ).+(?=\])</regexp>
      <regexpForFailed></regexpForFailed>
      <setForMatrix>false</setForMatrix>
    </hudson.plugins.descriptionsetter.DescriptionSetterPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.34">
      <patterns>
        <hudson.plugins.ws__cleanup.Pattern>
          <pattern>*.prevplotval</pattern>
          <type>EXCLUDE</type>
        </hudson.plugins.ws__cleanup.Pattern>
      </patterns>
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>